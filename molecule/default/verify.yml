---
- name: Verify
  hosts: all
  gather_facts: true
  become: true
  tasks:
    - name: Gather package facts
      ansible.builtin.package_facts:
        manager: auto
    - name: Populate service facts
      ansible.builtin.service_facts:
    ## パッケージのテスト
    - name: Assert package
      ansible.builtin.assert:
        that:
          - ansible_facts.packages['etckeeper'] is defined
          - ansible_facts.packages['ufw'] is defined
          - ansible_facts.packages['fail2ban'] is defined
          - ansible_facts.packages['glances'] is defined
    - name: Assert utility package
      ansible.builtin.assert:
        that:
          - ansible_facts.packages['tig'] is defined
          - ansible_facts.packages['jq'] is defined
          - ansible_facts.packages['jc'] is defined
          - ansible_facts.packages['s3fs'] is defined
          - ansible_facts.packages['strace'] is defined
          - ansible_facts.packages['rclone'] is defined
          - ansible_facts.packages['restic'] is defined
    ## ユーザーのテスト
    - name: Gather group facts
      ansible.builtin.shell:
        cmd: |
          set -euxo pipefail
          cat /etc/shadow | jc --shadow
        executable: /usr/bin/bash
      changed_when: false
      register: user_result
    - name: Set user variable
      ansible.builtin.set_fact:
        registerd_users: "{{ user_result.stdout | from_json | map(attribute='username') }}"
    - name: Assert user
      ansible.builtin.assert:
        that:
          - "'simple' in registerd_users"
          - "'disable_acount' in registerd_users"
          - "'full_set' in registerd_users"
    ## グループのテスト
    - name: Gather group facts
      ansible.builtin.shell:
        cmd: |
          set -euxo pipefail
          cat /etc/group | jc --group
        executable: /usr/bin/bash
      changed_when: false
      register: group_result
    - name: Set group variable
      ansible.builtin.set_fact:
        registerd_groups: "{{ group_result.stdout | from_json | map(attribute='group_name') }}"
    - name: Assert group
      ansible.builtin.assert:
        that:
          - "'adm' in registerd_groups"
    # ファイルのテスト
    - name: Check sshfilter script
      ansible.builtin.stat:
        path: /usr/local/bin/sshfilter
      register: result
    - name: Assert file
      ansible.builtin.assert:
        that:
          - result.stat.exists
          - not result.stat.isdir
          - result.stat.executable
    - name: Check backup script directory
      ansible.builtin.stat:
        path: /backup/scripts
      register: result
    - name: Assert backup script directory
      ansible.builtin.assert:
        that:
          - result.stat.exists
          - result.stat.isdir
    - name: Check backup data directory
      ansible.builtin.stat:
        path: /backup/data
      register: result
    - name: Assert backup data directory
      ansible.builtin.assert:
        that:
          - result.stat.exists
          - result.stat.isdir
    - name: Check geoip database update script
      ansible.builtin.stat:
        path: /etc/cron.weekly/geoip_update
      register: result
    - name: Assert geoip database update script
      ansible.builtin.assert:
        that:
          - result.stat.exists
    - name: Check geoip database update script
      ansible.builtin.lineinfile:
        path: /etc/cron.weekly/geoip_update
        line: FILES="GeoIP GeoIPv6 GeoIPCity GeoIPCityv6"
      check_mode: true
      register: result
    - name: Assert geoip database download file setting
      ansible.builtin.assert:
        that:
          - result is not changed
    - name: Check Web server docroot symlink
      ansible.builtin.stat:
        path: /home/full_set/www
      register: result
    - name: Assert docroot symlink
      ansible.builtin.assert:
        that:
          - result.stat.exists
          - result.stat.islnk
          - result.stat.pw_name == 'full_set'
          - result.stat.gr_name == 'full_set'
          - result.stat.lnk_source == '/var/www/html'
    ## サービスのテスト
    - name: Assert service(fail2ban)
      ansible.builtin.assert:
        that:
          - ansible_facts.services['fail2ban.service'] is defined
          - ansible_facts.services['fail2ban.service']['state'] == 'running'
          - ansible_facts.services['fail2ban.service']['status'] == 'enabled'
    - name: Assert service(etckeeper)
      ansible.builtin.assert:
        that:
          - ansible_facts.services['etckeeper.service'] is defined
    - name: Assert service(vnstat)
      ansible.builtin.assert:
        that:
          - ansible_facts.services['vnstat.service'] is defined
          - ansible_facts.services['vnstat.service']['state'] == 'running'
          - ansible_facts.services['vnstat.service']['status'] == 'enabled'
    - name: Assert service(glances)
      ansible.builtin.assert:
        that:
          - ansible_facts.services['glances.service'] is defined
          - ansible_facts.services['glances.service']['state'] == 'inactive'
          - ansible_facts.services['glances.service']['status'] == 'disabled'
    - name: Gather ufw status
      ansible.builtin.shell:
        cmd: |
          set -eo pipefail
          ufw status verbose | jc --ufw
        executable: /bin/bash
      changed_when: false
      register: result
    - name: Set ufw variable
      ansible.builtin.set_fact:
        ufw: "{{ result.stdout | from_json }}"
    - name: Assert service(ufw)
      ansible.builtin.assert:
        that:
          - ufw.status == 'active'
