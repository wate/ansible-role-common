---
- name: Manage groups
  ansible.builtin.group:
    name: "{{ item.name }}"
    gid: "{{ item.id | default(omit) }}"
    system: "{{ item.system | default(omit) }}"
    state: "{{ item.removed | default(false) | ternary('absent', 'present') }}"
  loop: "{{ common_groups }}"
  loop_control:
    label: "{{ item.name }}"
- name: Manage users
  ansible.builtin.user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    update_password: "{{ item.update_password | default('always') }}"
    password_lock: "{{ item.password_lock | default(false) }}"
    shell: "{{ item.shell | default('/usr/bin/bash') }}"
    groups: "{{ item.groups | default(omit) }}"
    uid: "{{ item.id | default(omit) }}"
    system: "{{ item.system | default(omit) }}"
    home: "{{ item.home | default(omit) }}"
    state: "{{ item.removed | default(false) | ternary('absent', 'present') }}"
    # `userdel` command `--remove` option
    remove: "{{ item.removed | default(false) }}"
  loop: "{{ common_users }}"
  loop_control:
    label: "{{ item.name }}"
- name: Filter removed users
  ansible.builtin.set_fact:
    exists_users: "{{ common_users | selectattr('removed', 'undefined') | list }}"
- name: Set authorized keys
  ansible.posix.authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1.key }}"
    state: "{{ item.1.removed | default(false) | ternary('absent', 'present') }}"
  loop: "{{ exists_users | subelements('authorized_keys', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.name }} : {{ item.1 }}"
- name: Create ~/.ssh directory
  ansible.builtin.file:
    path: ~/.ssh
    state: directory
    mode: "0700"
  loop: "{{ exists_users | selectattr('ssh_config', 'defined') | list }}"
  loop_control:
    label: "{{ item.name }}"
  become: true
  become_user: "{{ item.name }}"
- name: Manage ~/.ssh/config setting
  ansible.builtin.blockinfile:
    path: ~/.ssh/config
    block: |
      {% for ssh_config in item.ssh_config -%}
      Host {{ ssh_config.name }}
      {{ ssh_config.content | indent(2, true) }}
      {% endfor -%}
    mode: "0600"
    create: true
  loop: "{{ exists_users | selectattr('ssh_config', 'defined') | list }}"
  loop_control:
    label: "{{ item.name }}"
  become: true
  become_user: "{{ item.name }}"
- name: Deploy ssh private keys
  ansible.builtin.copy:
    dest: ~/.ssh/{{ item.1.name }}
    src: "{{ item.1.src }}"
    mode: "0600"
  loop: "{{ exists_users | subelements('upload_private_keys', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.name }} : {{ item.1.name }}"
  become: true
  become_user: "{{ item.0.name }}"
- name: Add load secret env on .bashrc
  ansible.builtin.blockinfile:
    path: ~/.bashrc
    marker: "# {mark} load secret env ANSIBLE MANAGED BLOCK"
    content: |
      if [ -f "$HOME/.secret" ]; then
        . "$HOME/.secret"
      fi
  loop: "{{ exists_users }}"
  loop_control:
    label: "{{ item.name }}"
  become: true
  become_user: "{{ item.name }}"
- name: Manage secret variable
  ansible.builtin.lineinfile:
    path: ~/.secret
    regexp: ^export {{ item.1.name }}=.*
    line: export {{ item.1.name }}="{{ item.1.value | default("") }}"
    create: true
    mode: "0600"
    state: "{{ item.1.removed | default(false) | ternary('absent', 'present') }}"
  loop: "{{ exists_users | subelements('secret_vars', skip_missing=True) | list }}"
  loop_control:
    label: "{{ item.0.name }} : {{ item.1.name }}"
  become: true
  become_user: "{{ item.0.name }}"
  tags: secret
- name: Retrieve users belonging to the admin group
  ansible.builtin.command:
    cmd: getent group {{ admin_group_name }}
  changed_when: false
  register: getent_group_result
- name: Assign the list of users belonging to the administrator group to the variable
  ansible.builtin.set_fact:
    server_admin_users: "{{ getent_group_result.stdout.split(':')[-1].split(',') }}"
- name: Grant administrative privileges
  ansible.builtin.command:
    cmd: gpasswd -a {{ item.name }} {{ admin_group_name }}
  when: item.name not in server_admin_users
  loop: "{{ exists_users | selectattr('admin', 'defined') | selectattr('admin', 'equalto', true) | list }}"
  loop_control:
    label: "{{ item.name }}"
- name: Revocation of administrative privileges
  ansible.builtin.command:
    cmd: gpasswd -d {{ item.name }} {{ admin_group_name }}
  when: item.name in server_admin_users
  loop: "{{ exists_users | selectattr('admin', 'defined') | selectattr('admin', 'equalto', false) | list }}"
  loop_control:
    label: "{{ item.name }}"
- name: Create user directories
  ansible.builtin.file:
    path: ~/{{ item.1.name }}
    src: "{{ item.1.link_target | default(omit) }}"
    state: "{{ 'directory' if item.1.link_target is undefined else 'link' }}"
    mode: "{{ item.1.mode | default(omit) }}"
  become: true
  become_user: "{{ item.0.name }}"
  loop: "{{ exists_users | subelements('directories', skip_missing=True) | list }}"
  loop_control:
    label: "{{ item.0.name }} : {{ item.1.name }}"
- name: Manage cron job variavle
  community.general.cronvar:
    user: "{{ item.0.name }}"
    name: "{{ item.1.name }}"
    value: "{{ omit if item.1.removed | default(false) else item.1.value | default('') }}"
    state: "{{ item.1.removed | default(false) | ternary('absent', 'present') }}"
  loop: "{{ exists_users | subelements('cron_vars', skip_missing=True) | list }}"
  loop_control:
    label: "{{ item.0.name }} : {{ item.1.name }}"
- name: Manage cron jobs
  ansible.builtin.cron:
    user: "{{ item.0.name }}"
    name: "{{ item.1.name }}"
    job: "{{ item.1.job }}"
    month: "{{ item.1.month | default('*') | string }}"
    day: "{{ item.1.day | default('*') | string }}"
    hour: "{{ item.1.hour | default('*') | string }}"
    minute: "{{ item.1.minute | default('*') | string }}"
    weekday: "{{ item.1.weekday | default('*') | string }}"
    disabled: "{{ item.1.disable | default(false) }}"
    state: "{{ item.1.removed | default(false) | ternary('absent', 'present') }}"
  loop: "{{ exists_users | subelements('cron_jobs', skip_missing=True) | list }}"
  loop_control:
    label: "{{ item.0.name }} : {{ item.1.name }}"
- name: Set root account lock status
  ansible.builtin.user:
    name: root
    password_lock: "{{ common_root_lock }}"
  when: common_root_lock is defined
